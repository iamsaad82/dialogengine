// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  hashedPassword String?
  role           UserRole @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("users")
}

model Template {
  id                String              @id @default(cuid())
  name              String
  type              String              @default("NEUTRAL")
  active            Boolean             @default(true)
  subdomain         String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  flowiseConfigId   String?             @unique
  branding          Json                @default("{}")
  config            Json                @default("{}")
  content           Json                @default("{\"metadata\": {}, \"sections\": []}")
  description       String?
  handlers          Json                @default("[]")
  meta              Json                @default("{}")
  responses         Json                @default("{\"rules\": [], \"templates\": []}")
  bot_config        Json?               @default("{}")
  bot_type          String?             @db.VarChar(50)
  extractionSchemas ExtractionSchema[]
  uploadJobs        UploadJob[]
  chatLogs          ChatLog[]
  template_handlers template_handlers[]
  flowiseConfig     FlowiseConfig?      @relation(fields: [flowiseConfigId], references: [id])
  documentTypes     DocumentType[]

  @@index([bot_type])
  @@index([type])
  @@index([active])
  @@index([subdomain])
  @@map("templates")
}

model FlowiseConfig {
  id             String    @id @default(cuid())
  url            String    @db.VarChar(255)
  apiKey         String?   @db.VarChar(255)
  responseRules  Json      @default("[]")
  defaultButtons Json      @default("[]")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  templates      Template?

  @@map("flowise_configs")
}

model ResponseType {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(255)
  schema    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("response_types")
}

model Asset {
  id        String   @id @default(cuid())
  type      String   @db.VarChar(50)
  url       String   @db.VarChar(255)
  key       String   @db.VarChar(255)
  size      Int
  mimeType  String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@map("assets")
}

model ChatLog {
  id               String   @id @default(cuid())
  timestamp        DateTime @default(now())
  question         String
  answer           String?
  wasAnswered      Boolean
  matchedExampleId String?
  templateId       String
  sessionId        String
  template         Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([timestamp])
  @@map("chat_logs")
}

model ExtractionSchema {
  id          String   @id @default(cuid())
  templateId  String
  name        String
  description String?
  version     Int      @default(1)
  fields      Json     // Für patterns, metadata etc.
  metadata    Json?    // Für generated, confidence etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model template_handlers {
  id         String   @id @default(cuid())
  templateId String
  type       String
  name       String
  active     Boolean  @default(true)
  metadata   Json     @default("{}")
  config     Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  templates  Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([templateId])
  @@index([name])
}

model UploadJob {
  id             String   @id @default(cuid())
  templateId     String
  status         String
  totalFiles     Int
  processedFiles Int
  metadata       Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  template       Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([templateId])
  @@index([createdAt])
}

model DocumentType {
  id             String   @id @default(cuid())
  templateId     String
  name           String
  description    String?
  type           String
  patterns       Json     @default("[]")
  metadata       Json     @default("{}")
  validation     Json     @default("{}")
  responseConfig Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  template       Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([type])
  @@map("document_types")
}

enum UserRole {
  ADMIN
  USER
}

enum TemplateType {
  NEUTRAL
  INDUSTRY
  CUSTOM
}
